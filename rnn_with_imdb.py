# -*- coding: utf-8 -*-
"""RNN with IMDB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxHv-8DYGlbCbjqUNvf5G8geUv1OGQLY

# **Recurrent Neural Network**
Text Classification with IMDB movie review dataset
"""

import numpy as np
import tensorflow as tf

"""Loading the Dataset"""

from tensorflow.keras.datasets import imdb

"""### **Data Preprocessing**"""

words=20000
max_length=100

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=words)

"""Padding the Text"""

x_train = tf.keras.preprocessing.sequence.pad_sequences(x_train, maxlen=max_length)

x_test = tf.keras.preprocessing.sequence.pad_sequences(x_test, maxlen=max_length)

word_size=words
word_size

embed_size=128

"""### Building a Recurrent Neural Network"""

imdb_model=tf.keras.Sequential()

# Embedding Layer
imdb_model.add(tf.keras.layers.Embedding(word_size, embed_size, input_shape=(x_train.shape[1],)))

# LSTM Layer
imdb_model.add(tf.keras.layers.LSTM(units=128, activation='tanh'))

# Output Layer
imdb_model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

imdb_model.summary()

"""#### Compiling the model"""

imdb_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

"""#### Training the model"""

imdb_model.fit(x_train, y_train, epochs=5, batch_size=128)

test_loss, test_acurracy = imdb_model.evaluate(x_test, y_test)

print("Test accuracy: {}".format(test_acurracy))

